---
- name: Create docker network
  docker_network:
    name: cloudnet
    state: present

- name: Sabnzbd container
  docker_container:
    state: started
    name: sabnzbd
    image: linuxserver/sabnzbd:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/sabnzbd:/config"
      - "{{ download_dir }}:/downloads"
      - "{{ download_dir}}/incomplete:/incomplete-downloads"
    ports:
      - "127.0.0.1:8010:8080"
    networks:
      - name: cloudnet
        aliases:
          - sabnzbd
    purge_networks: true
    env:
      PUID={{ users.0.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      test: "curl --fail --head --silent http://localhost:8080/sabnzbd/ || exit 1"
      interval: 10s
  tags: sabnzbd

- name: Transmission container
  docker_container:
    state: started
    name: transmission
    image: linuxserver/transmission:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/transmission:/config"
      - "{{ download_dir}}:/downloads"
      - "{{ media_dir }}/watch:/watch"
    ports:
      - "127.0.0.1:9091:9091"
      - "127.0.0.1:51413:51413"
    networks:
      - name: cloudnet
        aliases:
          - transmission
    purge_networks: true
    env:
      PUID={{ users.5.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:9091/transmission || exit 1"
      interval: 10s
  tags: transmission

- name: Hydra container
  docker_container:
    state: started
    name: hydra
    image: linuxserver/hydra:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/hydra:/config"
    ports:
      - "127.0.0.1:5075:5075"
    networks:
      - name: cloudnet
        aliases:
          - hydra
    purge_networks: true
    env:
      PUID={{ users.11.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:5075/hydra/ || exit 1"
      interval: 10s
  tags: hydra

- name: Jackett
  docker_container:
    state: started
    name: jackett
    image: linuxserver/jackett:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/jackett:/config"
    ports:
      - "127.0.0.1:9117:9117"
    networks:
      - name: cloudnet
        aliases:
          - jackett
    purge_networks: true
    env:
      PUID={{ users.11.uid }}
      PGID=1001
      TZ={{ timezone }}
      RUN_OPTS=
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:9117/jackett/ || exit 1"
      interval: 10s
  tags: jackett

- name: Plex container
  docker_container:
    state: started
    name: plex
    image: linuxserver/plex:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/plex:/config"
      - "{{ media_dir }}/Videos:/data:ro"
      - "/home/transcode:/transcode"
    ports:
      - "32469:32469"
      - "32400:32400"
      - "32401:32401"
      - "3005:3005"
      - "8324:8324"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    env:
      PUID=111
      PGID=118
      TZ={{ timezone }}
      VERSION=1.16.2.1297-4b7ace214
    restart_policy: always
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:32400/web/index.html || exit 1"
      interval: 10s
  tags: plex

- name: Sonarr container
  docker_container:
    state: started
    name: sonarr
    image: linuxserver/sonarr:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/sonarr:/config"
      - "{{ download_dir }}:/downloads"
      - "{{ media_dir }}/Videos/TV:/tv"
      - "/dev/rtc:/rtc:ro"
    ports:
      - "127.0.0.1:8989:8989"
    networks:
      - name: cloudnet
        aliases:
          - sonarr
    purge_networks: true
    env:
      PUID={{ users.3.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:8989/tv/ || exit 1"
      interval: 10s
  tags: sonarr

- name: Tautulli container
  docker_container:
    state: started
    name: tautulli
    image: linuxserver/tautulli:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/plexpy:/config"
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ configs_dir}}/plex/Library/Application\ Support/Plex\ Media\ Server/Logs:/logs:ro"
    ports:
      - "127.0.0.1:8283:8181"
    networks:
      - name: cloudnet
        aliases:
          - tautulli
    purge_networks: true
    env:
      PUID={{ users.8.uid }}
      PGID=65534
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:8181/plexpy/home || exit 1"
      interval: 10s
  tags: plexpy

- name: Radarr
  docker_container:
    state: started
    name: radarr
    image: linuxserver/radarr:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/radarr:/config"
      - "{{ download_dir }}:/downloads"
      - "{{ media_dir }}/Videos/Movies:/movies"
      - "/etc/localtime:/etc/localtime:ro"
    ports:
      - "127.0.0.1:7878:7878"
    networks:
      - name: cloudnet
        aliases:
          - radarr
    purge_networks: true
    env:
      PUID={{ users.1.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:7878/movies/ || exit 1"
      interval: 10s
  tags: radarr

- name: Lidarr
  docker_container:
    state: started
    name: lidarr
    image: linuxserver/lidarr:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/lidarr:/config"
      - "{{ download_dir }}:/downloads"
      - "{{ media_dir }}/Videos/Music:/music"
    ports:
      - "127.0.0.1:8686:8686"
    networks:
      - name: cloudnet
        aliases:
          - lidarr
    purge_networks: true
    env:
      PUID={{ users.4.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:8686/music/ || exit 1"
      interval: 10s
  tags: lidarr

- name: Beets
  docker_container:
    state: started
    name: beets
    image: linuxserver/beets:latest
    pull: true
    volumes:
      - "{{ configs_dir }}/beets:/config"
      - "{{ download_dir }}:/downloads"
      - "{{ media_dir }}/Videos/Music:/music"
    ports:
      - "127.0.0.1:8337:8337"
    networks:
      - name: cloudnet
        aliases:
          - beets
    purge_networks: true
    env:
      UMASK=2002
      PUID={{ users.12.uid }}
      PGID=1001
      TZ={{ timezone }}
    restart_policy: always
    healthcheck:
      start_period: 2s
      test: "curl --fail --head --silent http://localhost:8337/ || exit 1"
      interval: 10s
  tags: beets

- name: Google Music Deduplication
  docker_container:
    state: started
    name: gmusic-dedup
    image: jaymoulin/google-musicmanager-dedup-api:1.0.0
    pull: true
    volumes:
      - "{{ configs_dir }}/gmusic-dedup:/app/db"
    networks:
      - name: cloudnet
        aliases:
          - gmusic-dedup
    purge_networks: true
    restart_policy: always
  tags: dedup

- name: Google Music
  docker_container:
    state: started
    name: gmusic
    image: jaymoulin/google-music-uploader:1.4.1
    pull: true
    volumes:
      - "{{ configs_dir }}/gmusic:/root/oauth"
    networks:
      - name: cloudnet
        aliases:
          - gmusic
    purge_networks: true
    env:
      REMOVE=false
      ONESHOT=false
      UPLOADER_ID={{ ansible_default_ipv4.macaddress|upper }}
    restart_policy: always
  tags: gmusic

- name: Remove dangling images
  docker_prune:
    images: true
    images_filters:
      dangling: true
